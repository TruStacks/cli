"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[702],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(r),m=o,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||a;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9136:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const a={},i="CI Executor",s={unversionedId:"requirements-core-components/ci-executor",id:"requirements-core-components/ci-executor",title:"CI Executor",description:"The CI executor is responsible for orchestrating dependencies and running Dagger plans that are provided by workflows. The CI executor must have the following capabilities:",source:"@site/docs/requirements-core-components/ci-executor.md",sourceDirName:"requirements-core-components",slug:"/requirements-core-components/ci-executor",permalink:"/trustacks/docs/requirements-core-components/ci-executor",draft:!1,editUrl:"https://github.com/TruStacks/trustacks/tree/main/docs/docs/requirements-core-components/ci-executor.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Core Components",permalink:"/trustacks/docs/category/core-components"},next:{title:"Complementary Components",permalink:"/trustacks/docs/requirements-core-components/requirements-complementary-components"}},l={},c=[{value:"Build",id:"build",level:2},{value:"Release",id:"release",level:2},{value:"Idempotence",id:"idempotence",level:2}],u={toc:c};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"ci-executor"},"CI Executor"),(0,o.kt)("p",null,"The CI executor is responsible for orchestrating dependencies and running ",(0,o.kt)("a",{parentName:"p",href:"https://dagger.io/"},"Dagger")," plans that are provided by workflows. The CI executor must have the following capabilities:"),(0,o.kt)("p",null,"Run containers"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Pass environment variables to the dagger runtime"),(0,o.kt)("li",{parentName:"ul"},"Pull from version control"),(0,o.kt)("li",{parentName:"ul"},"Retry for intermittent failures")),(0,o.kt)("p",null,"The CI executor must delegate two tasks to the dagger runtime"),(0,o.kt)("h2",{id:"build"},"Build"),(0,o.kt)("p",null,"The build task is executed prior to the release of an application. The purpose of this task is to prepare the code for release. All analysis such as unit tests, static analysis, and security scans should be run in this task. Any build artifacts such as modules, binaries, or containers should also be created and stored in the artifact server."),(0,o.kt)("p",null,"Additional actions will be taken depending on the application type. For example a containerized application will also include a container security scan."),(0,o.kt)("p",null,"The analysis task will generate a number of report artifacts that are available to the product team for inspection."),(0,o.kt)("p",null,"Any failures encountered during the analysis step will cause the entire CI execution to fail until the issue is resolved."),(0,o.kt)("h2",{id:"release"},"Release"),(0,o.kt)("p",null,"The release task is executed after analysis. The release task will deliver code per the workflow. The delivery method will vary depending on the workflow. For example a Kubernetes delivery method would deploy the application container using Helm or Kustomize."),(0,o.kt)("h2",{id:"idempotence"},"Idempotence"),(0,o.kt)("p",null,"Idempotence is required to ensure that duplication of artifacts and side effects are prevented in the case of a CI task retry."))}p.isMDXComponent=!0}}]);